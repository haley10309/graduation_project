{"ast":null,"code":"var _jsxFileName = \"/Users/hayungyoo/project/konfold_front/src/pages/AlphaFold.js\",\n  _s = $RefreshSig$();\nimport React from \"react\";\nimport axios from \"axios\";\nimport { useState } from \"react\";\nimport ClipLoader from \"react-spinners/ClipLoader\";\nimport ClimbingBoxLoader from 'react-spinners/ClimbingBoxLoader';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function AlphaFold() {\n  _s();\n  const [protein, setProtein] = useState(\"\"); //입력 값 변수 [입력값, 입력값 변경]\n  const [pdb_predict, setPDBPredict] = useState(null); // response 변수\n\n  const [button, setButton] = useState(true);\n  const isAlpha = str => /^[a-zA-Z]*$/.test(str);\n\n  //로딩 화면  \n  const [loading, setLoading] = useState(false);\n  const [isChecked1, setIsChecked1] = useState(false);\n  const [isChecked2, setIsChecked2] = useState(false);\n  const [isChecked3, setIsChecked3] = useState(false);\n\n  // 알맞은 시퀀스 입력시 Button 켜짐\n  function changeButton() {\n    const UpperProtein = protein.toUpperCase();\n\n    // UpperProtein.includes('G'||'A'||'V'||'L'||'I'||'S'||'T'||'C'||'M'||'D'||'E'||'N'||'Q'||'K'||'R'||'F'||'Y'||'W'||'H'||'P'||'U') ? setButton(false) : setButton(true)\n    // UpperProtein.includes('G'||'A'||'V'||'L'||'I'||'S'||'T'||'C'||'M'||'D'||'E'||'N'||'Q'||'K'||'R'||'F'||'Y'||'W'||'H'||'P'||'U') ? setButton(false) : setButton(true)\n    UpperProtein.includes(\"B\") || UpperProtein.includes(\"J\") || UpperProtein.includes(\"O\") || UpperProtein.includes(\"X\") || UpperProtein.includes(\"Z\") || UpperProtein.includes(\" \") || !isAlpha(UpperProtein) ? setButton(true) : setButton(false);\n  }\n  const changeButtonFalse = () => {\n    setButton(!button);\n  };\n\n  // 입력된 변수 저장\n  const handleInput = event => {\n    event.preventDefault();\n    setProtein(event.target.value); //변수 저장 완료\n    // const UpperProtein = protein.toUpperCase();\n    // UpperProtein.includes('G' ||'A'||'V'||'L'||'I'||'S'||'T'||'C'||'M'||'D'||'E'||'N'||'Q'||'K'||'R'||'F'||'Y'||'W'||'H'||'P'||'U') ? setButton(false) : setButton(true)\n  };\n\n  const handleCheckbox1Change = () => {\n    setIsChecked1(!isChecked1);\n    if (!isChecked1) {\n      if (isChecked3 || isChecked2) {\n        setProtein(\"\");\n        changeButton();\n      } else {\n        setProtein(\"VLSPADKTNVKAAWGKVGAHAGEYGAEALERMFLSFPTTKTYFPHFDLSHGSAQVKGHGKKVADALTAVAHVDDMPNAL \");\n        changeButton();\n      }\n    } else {\n      setProtein(\"\");\n      changeButton();\n    }\n  };\n  const handleCheckbox2Change = () => {\n    setIsChecked2(!isChecked2);\n    if (!isChecked2) {\n      if (isChecked3 || isChecked1) {\n        setProtein(\"\");\n        changeButton();\n      } else {\n        setProtein(\"GSGHMDKKYSIGLAIGTNSVGWAVITDEYKVPSKKFKVLGNTDRHSIKKNLIGALLFDSGETAEATRLKRTARRRYTRRKNRILYLQEIFSNEMAKVDDSFFHRLEESFLVEEDKKHERHPIFGNIVDEVAYHEKYPTIYHLRKKLVDSTDKADLRLIYLALAHMIKFRGHFLIEGDLNPDNSDVDKLFIQLVQTYNQLFEENPINASGVDAKAILSARLSKSRRLENLIAQLPGEKKNGLFGNLIALSLGLTPNFKSNFDLAEDAKLQLSKDTYDDDLDNLLAQIGDQYADLFLAAKNLSDAILLSDILRVNTEITKAPLSASMIKRYDEHHQDLTLLKALVRQQLPEKYKEIFFDQSKNGYAGYIDGGASQEEFYKFIKPILEKMDGTEELLVKLNREDLLRKQRTFDNGSIPHQIHLGELHAILRRQEDFYPFLKDNREKIEKILTFRIPYYVGPLARGNSRFAWMTRKSEETITPWNFEEVVDKGASAQSFIERMTNFDKNLPNEKVLPKHSLLYEYFTVYNELTKVKYVTEGMRKPAFLSGEQKKAIVDLLFKTNRKVTVKQLKEDYFKKIEEFDSVEISGVEDRFNASLGTYHDLLKIIKDKDFLDNEENEDILEDIVLTLTLFEDREMIEERLKTYAHLFDDKVMKQLKRRRYTGWGRLSRKLINGIRDKQSGKTILDFLKSDGFANRNFMQLIHDDSLTFKEDIQKAQVSGQGDSLHEHIANLAGSPAIKKGILQTVKVVDELVKVMGRHKPENIVIEMARENQTTQKGQKNSRERMKRIEEGIKELGSQILKEHPVENTQLQNEKLYLYYLQNGRDMYVDQELDINRLSDYDVDAIVPQSFLKDDSIDNKVLTRSDKNRGKSDNVPSEEVVKKMKNYWRQLLNAKLITQRKFDNLTKAERGGLSELDKAGFIKRQLVETRQITKHVAQILDSRMNTKYDENDKLIREVKVITLKSKLVSDFRKDFQFYKVREINNYHHAHDAYLNAVVGTALIKKYPKLESEFVYGDYKVYDVRKMIAKSEQEIGKATAKYFFYSNIMNFFKTEITLANGEIRKRPLIETNGETGEIVWDKGRDFATVRKVLSMPQVNIVKKTEVQTGGFSKESILPKRNSDKLIARKKDWDPKKYGGFDSPTVAYSVLVVAKVEKGKSKKLKSVKELLGITIMERSSFEKNPIDFLEAKGYKEVKKDLIIKLPKYSLFELENGRKRMLASAGELQKGNELALPSKYVNFLYLASHYEKLKGSPEDNEQKQLFVEQHKHYLDEIIEQISEFSKRVILADANLDKVLSAYNKHRDKPIREQAENIIHLFTLTNLGAPAAFKYFDTTIDRKRYTSTKEVLDATLIHQSITGLYETRIDLSQLGGD \");\n        changeButton();\n      }\n    } else {\n      setProtein(\"\");\n      changeButton();\n    }\n  };\n  const handleCheckbox3Change = () => {\n    setIsChecked3(!isChecked3);\n    if (!isChecked3) {\n      if (isChecked1 || isChecked2) {\n        setProtein(\"\");\n        changeButton();\n      } else {\n        setProtein(\"MESLVPGFNEKTHVQLSLPVLQVRDVLVRGFGDSVEEVLSEARQHLKDGTCGLVEVEKGVLPQLEQPYVFIKRSDARTAPHGHVMVELVAELEGIQYGRSGVVVYKDGNEYDYALSYMQLPEDLRKYICEVQDKGWYHFDGQEENKGVVRGWVPSNYITPVNSLEPFLIYKDVFRSSVLHSTQDLFLPFFSNVTWFHAIHVSGTNGTKRFDNPVLPFNDGVYFASTEKSNIIRGWIFGTTLDSKTQSLLIVNNATNVVIKVCEFQFCNDPFLGVYYHKNNKSWMESEFRVYSSANNCTFEYVSQPFLMDLEGKQGNFKNLREFVFKNIDGYFKIYSKHTPINLVRDLPQGFSALEPLVDLPIGINITRFQTLLALHRSYLTPGDSSSGWTAGAAAYYVGYLQPRTFLLKYNENGTITDAVDCALDPLSETKCTLKSFTVEKGIYQTSNFRVQPTESIVRFPNITNLCPFGEVFNATRFASVYAWNRKRISNCVADYSVLYNSASFSTFKCYGVSPTKLNDLCFTNVYADSFVIRGDEVRQIAPGQTGKIADYNYKLPDDFTGCVIAWNSNNLDSKVGGNYNYLYRLFRKSNLKPFERDISTEIYQAGSTPCNGVEGFNCYFPLQSYGFQPTNGVGYQPYRVVVLSFELLHAPATVCGPKKSTNLVKNKCVNFNFNGLTGTGVLTESNKKFLPFQQFGRDIADTTDAVRDPQTLEILDITPCSFGGVSVITPGTNTSNQVAVLYQDVNCTEVPVAIHADQLTPTWRVYSTGSNVFQTQAFGRRGPEQTQGNFGDQELIRQGTDYKHWPQIAQFAPSASAFFGMSRIGMEVTPSGTWLTYTGAIKLDDKDPNFKDQVILLNKHIDAYKTFPPTEPKKDKKKKADETQALPQRQKKQQTVTLLPAADLDDFSKQLQQSMSSADSTQA\");\n        changeButton();\n      }\n    } else {\n      setProtein(\"\");\n      changeButton();\n    }\n  };\n\n  // prediction request\n  const post = seq => {\n    //Promise로 fetch를 감싼다\n    return new Promise((resolve, reject) => {\n      fetch(\"/konfold/alphafold2\", {\n        method: \"POST\",\n        //메소드 지정\n        headers: {\n          //데이터 타입 지정\n          \"Content-Type\": \"application/json; charset=utf-8\"\n        },\n        body: JSON.stringify({\n          proteinName: seq\n        }) //데이터 JSON문자열화 후 body에 저장\n      }).then(res => {\n        //리턴값이 있으면 리턴값에 맞는 req지정\n        console.log(\"fetchtest1:\", res);\n        const blob = res.blob();\n        return blob;\n      }).then(blob => {\n        //리턴값에 대한 처리\n        console.log(\"fetchtest2:\", blob);\n        //res 값에 따른 결과 처리       \n        if (blob == null) {\n          console.log(\"데이터 가져오기 실패\");\n        }\n        //let blobURL = URL.createObjectURL(blob)\n        //console.log(\"fetchtest3:\",blob);\n        resolve(blob);\n        //localStorage.setItem('pdb_protein', res);\n      });\n    });\n  };\n\n  // button 클릭\n  const confirm = async event => {\n    // 확인 후 다음 페이지\n    event.preventDefault();\n    console.log(\"start_test:\", protein);\n    setLoading(true);\n    try {\n      // output blob저장\n      const predictResult = await post(protein);\n      console.log(\"result_blob:\", predictResult);\n      //localStorage.setItem('predictResult', predictResult);\n\n      // url저장\n      let blobURL = URL.createObjectURL(predictResult);\n      console.log(\"result_bloburl:\", blobURL);\n      //localStorage.setItem('predictResultURL', blobURL);\n      //localStorage.setItem('predictResult', predictResult.substring(5));\n\n      //read blob data\n      let reader = new FileReader();\n      reader.onload = function (event) {\n        let pdbdata = event.target.result;\n        // save pdb data to local storage\n        localStorage.setItem('pdbData', pdbdata);\n        setPDBPredict(pdbdata);\n      };\n      reader.readAsText(predictResult);\n      setTimeout(() => {\n        setLoading(false);\n        // 시각화 창\n        window.location.href = \"/AlphaOutput\";\n      }, 360000); //필요한 시간 만큼 숫자조정 => 1000 = 1초\n      //while 문으로 작성하려고 해도 뭘 기준으로 해야 하는 지 모르겠음.\n    } catch (error) {\n      console.log(\"데이터 가져오기 실패:\", error);\n      setLoading(false);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"loading_page\",\n    children: loading ? /*#__PURE__*/_jsxDEV(ClimbingBoxLoader, {\n      className: \"loading_page\",\n      size: 30,\n      color: \"#123abc\",\n      loading: loading\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 166,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"inside_page\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"titleprotein\",\n        children: \"\\uB2E8\\uBC31\\uC9C8 \\uC2DC\\uD000\\uC2A4\\uB97C \\uC785\\uB825\\uD574 \\uC8FC\\uC138\\uC694\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 173,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"contentWrap\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"inputTitle\",\n          children: \"\\uB2E8\\uBC31\\uC9C8 \\uC2DC\\uD000\\uC2A4\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 175,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"inputWrap\",\n          children: /*#__PURE__*/_jsxDEV(\"input\", {\n            className: \"input\",\n            value: protein //input으로 받은 프로틴 시퀀스\n            ,\n            onChange: handleInput,\n            onKeyUp: changeButton\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 177,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 176,\n          columnNumber: 13\n        }, this), \" \", /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"errorMessageWrap\",\n          children: \"\\uC62C\\uBC14\\uB978 \\uC2DC\\uD000\\uC2A4\\uB97C \\uC785\\uB825\\uD574 \\uC8FC\\uC138\\uC694\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 184,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 174,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"inputTitle\",\n        children: \"\\uC608\\uC2DC \\uC2DC\\uD000\\uC2A4\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 186,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"checkbox\",\n          children: \"\\uC54C\\uD30C-1 \\uAE00\\uB85C\\uBE48 \\uCCB4\\uC778\\uC758 \\uC77C\\uBD80 \\uC11C\\uC5F4 \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 188,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          id: \"checkbox\",\n          type: \"checkbox\",\n          checked: isChecked1,\n          onChange: handleCheckbox1Change\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 189,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 187,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"checkbox\",\n          children: \"CRISPR-Cas9\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 199,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          id: \"checkbox\",\n          type: \"checkbox\",\n          checked: isChecked2,\n          onChange: handleCheckbox2Change\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 200,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 198,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"checkbox\",\n          children: \"SARS-CoV-2 \\uB2E8\\uBC31\\uC9C8 \\uC11C\\uC5F4 \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 208,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          id: \"checkbox\",\n          type: \"checkbox\",\n          checked: isChecked3,\n          onChange: handleCheckbox3Change\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 209,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 207,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          disabled: button,\n          onClick: confirm,\n          className: \"bottomButton\",\n          children: \"\\uD655\\uC778\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 217,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 216,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"inputTitle\",\n        children: \" \\uC54C\\uD30C\\uD3F4\\uB4DC \\uCCB4\\uD5D8 \\uD654\\uBA74\\uC785\\uB2C8\\uB2E4\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 224,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 172,\n      columnNumber: 9\n    }, this) //inside wrap 끝\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 162,\n    columnNumber: 5\n  }, this) //loading page 끝\n  ;\n}\n_s(AlphaFold, \"vo+rBkxbVdhAAY0MjuwwDOJBEXY=\");\n_c = AlphaFold;\nvar _c;\n$RefreshReg$(_c, \"AlphaFold\");","map":{"version":3,"names":["React","axios","useState","ClipLoader","ClimbingBoxLoader","jsxDEV","_jsxDEV","AlphaFold","_s","protein","setProtein","pdb_predict","setPDBPredict","button","setButton","isAlpha","str","test","loading","setLoading","isChecked1","setIsChecked1","isChecked2","setIsChecked2","isChecked3","setIsChecked3","changeButton","UpperProtein","toUpperCase","includes","changeButtonFalse","handleInput","event","preventDefault","target","value","handleCheckbox1Change","handleCheckbox2Change","handleCheckbox3Change","post","seq","Promise","resolve","reject","fetch","method","headers","body","JSON","stringify","proteinName","then","res","console","log","blob","confirm","predictResult","blobURL","URL","createObjectURL","reader","FileReader","onload","pdbdata","result","localStorage","setItem","readAsText","setTimeout","window","location","href","error","className","children","size","color","fileName","_jsxFileName","lineNumber","columnNumber","onChange","onKeyUp","htmlFor","id","type","checked","disabled","onClick","_c","$RefreshReg$"],"sources":["/Users/hayungyoo/project/konfold_front/src/pages/AlphaFold.js"],"sourcesContent":["import React from \"react\";\nimport axios from \"axios\";\nimport { useState } from \"react\";\nimport ClipLoader from \"react-spinners/ClipLoader\";\nimport ClimbingBoxLoader from 'react-spinners/ClimbingBoxLoader';\n\n\nexport default function AlphaFold(){\n  const [protein, setProtein] = useState(\"\"); //입력 값 변수 [입력값, 입력값 변경]\n  const [pdb_predict, setPDBPredict] = useState(null) // response 변수\n\n  const [button, setButton] = useState(true);\n  const isAlpha = str => /^[a-zA-Z]*$/.test(str);\n  \n  //로딩 화면  \n  const [loading, setLoading] = useState(false);\n  const [isChecked1, setIsChecked1] = useState(false);\n  const [isChecked2, setIsChecked2] = useState(false);\n  const [isChecked3, setIsChecked3] = useState(false);\n\n\n // 알맞은 시퀀스 입력시 Button 켜짐\n  function changeButton(){\n    const UpperProtein = protein.toUpperCase();\n  \n  // UpperProtein.includes('G'||'A'||'V'||'L'||'I'||'S'||'T'||'C'||'M'||'D'||'E'||'N'||'Q'||'K'||'R'||'F'||'Y'||'W'||'H'||'P'||'U') ? setButton(false) : setButton(true)\n    // UpperProtein.includes('G'||'A'||'V'||'L'||'I'||'S'||'T'||'C'||'M'||'D'||'E'||'N'||'Q'||'K'||'R'||'F'||'Y'||'W'||'H'||'P'||'U') ? setButton(false) : setButton(true)\n    (UpperProtein.includes(\"B\") || UpperProtein.includes(\"J\") || UpperProtein.includes(\"O\") || UpperProtein.includes(\"X\") || UpperProtein.includes(\"Z\") || UpperProtein.includes(\" \") || (!isAlpha(UpperProtein))) ? setButton(true) : setButton(false)\n\n  }\n  const changeButtonFalse = () => {\n    setButton(!button);\n  }\n\n  // 입력된 변수 저장\n  const handleInput = (event) => {\n    event.preventDefault();\n    setProtein(event.target.value); //변수 저장 완료\n    // const UpperProtein = protein.toUpperCase();\n    // UpperProtein.includes('G' ||'A'||'V'||'L'||'I'||'S'||'T'||'C'||'M'||'D'||'E'||'N'||'Q'||'K'||'R'||'F'||'Y'||'W'||'H'||'P'||'U') ? setButton(false) : setButton(true)\n  };\n  const handleCheckbox1Change = () => {\n    setIsChecked1(!isChecked1);\n    if(!isChecked1){\n      if((isChecked3||isChecked2)){\n        setProtein(\"\");\n        changeButton();\n      }else{\n      setProtein(\"VLSPADKTNVKAAWGKVGAHAGEYGAEALERMFLSFPTTKTYFPHFDLSHGSAQVKGHGKKVADALTAVAHVDDMPNAL \");\n      changeButton();\n      }\n    } else {\n      setProtein(\"\");\n      changeButton();\n    }\n  };\n  const handleCheckbox2Change = () => {\n    setIsChecked2(!isChecked2);\n    if(!isChecked2){\n      if((isChecked3||isChecked1)){\n        setProtein(\"\");\n        changeButton();\n      }else{\n      setProtein(\"GSGHMDKKYSIGLAIGTNSVGWAVITDEYKVPSKKFKVLGNTDRHSIKKNLIGALLFDSGETAEATRLKRTARRRYTRRKNRILYLQEIFSNEMAKVDDSFFHRLEESFLVEEDKKHERHPIFGNIVDEVAYHEKYPTIYHLRKKLVDSTDKADLRLIYLALAHMIKFRGHFLIEGDLNPDNSDVDKLFIQLVQTYNQLFEENPINASGVDAKAILSARLSKSRRLENLIAQLPGEKKNGLFGNLIALSLGLTPNFKSNFDLAEDAKLQLSKDTYDDDLDNLLAQIGDQYADLFLAAKNLSDAILLSDILRVNTEITKAPLSASMIKRYDEHHQDLTLLKALVRQQLPEKYKEIFFDQSKNGYAGYIDGGASQEEFYKFIKPILEKMDGTEELLVKLNREDLLRKQRTFDNGSIPHQIHLGELHAILRRQEDFYPFLKDNREKIEKILTFRIPYYVGPLARGNSRFAWMTRKSEETITPWNFEEVVDKGASAQSFIERMTNFDKNLPNEKVLPKHSLLYEYFTVYNELTKVKYVTEGMRKPAFLSGEQKKAIVDLLFKTNRKVTVKQLKEDYFKKIEEFDSVEISGVEDRFNASLGTYHDLLKIIKDKDFLDNEENEDILEDIVLTLTLFEDREMIEERLKTYAHLFDDKVMKQLKRRRYTGWGRLSRKLINGIRDKQSGKTILDFLKSDGFANRNFMQLIHDDSLTFKEDIQKAQVSGQGDSLHEHIANLAGSPAIKKGILQTVKVVDELVKVMGRHKPENIVIEMARENQTTQKGQKNSRERMKRIEEGIKELGSQILKEHPVENTQLQNEKLYLYYLQNGRDMYVDQELDINRLSDYDVDAIVPQSFLKDDSIDNKVLTRSDKNRGKSDNVPSEEVVKKMKNYWRQLLNAKLITQRKFDNLTKAERGGLSELDKAGFIKRQLVETRQITKHVAQILDSRMNTKYDENDKLIREVKVITLKSKLVSDFRKDFQFYKVREINNYHHAHDAYLNAVVGTALIKKYPKLESEFVYGDYKVYDVRKMIAKSEQEIGKATAKYFFYSNIMNFFKTEITLANGEIRKRPLIETNGETGEIVWDKGRDFATVRKVLSMPQVNIVKKTEVQTGGFSKESILPKRNSDKLIARKKDWDPKKYGGFDSPTVAYSVLVVAKVEKGKSKKLKSVKELLGITIMERSSFEKNPIDFLEAKGYKEVKKDLIIKLPKYSLFELENGRKRMLASAGELQKGNELALPSKYVNFLYLASHYEKLKGSPEDNEQKQLFVEQHKHYLDEIIEQISEFSKRVILADANLDKVLSAYNKHRDKPIREQAENIIHLFTLTNLGAPAAFKYFDTTIDRKRYTSTKEVLDATLIHQSITGLYETRIDLSQLGGD \");\n      changeButton();\n      }\n    } else {\n      setProtein(\"\");\n      changeButton();\n    }\n  };\n  const handleCheckbox3Change = () => {\n    setIsChecked3(!isChecked3);\n    if(!isChecked3){\n      if((isChecked1||isChecked2)){\n        setProtein(\"\");\n        changeButton();\n      }else{\n      setProtein(\"MESLVPGFNEKTHVQLSLPVLQVRDVLVRGFGDSVEEVLSEARQHLKDGTCGLVEVEKGVLPQLEQPYVFIKRSDARTAPHGHVMVELVAELEGIQYGRSGVVVYKDGNEYDYALSYMQLPEDLRKYICEVQDKGWYHFDGQEENKGVVRGWVPSNYITPVNSLEPFLIYKDVFRSSVLHSTQDLFLPFFSNVTWFHAIHVSGTNGTKRFDNPVLPFNDGVYFASTEKSNIIRGWIFGTTLDSKTQSLLIVNNATNVVIKVCEFQFCNDPFLGVYYHKNNKSWMESEFRVYSSANNCTFEYVSQPFLMDLEGKQGNFKNLREFVFKNIDGYFKIYSKHTPINLVRDLPQGFSALEPLVDLPIGINITRFQTLLALHRSYLTPGDSSSGWTAGAAAYYVGYLQPRTFLLKYNENGTITDAVDCALDPLSETKCTLKSFTVEKGIYQTSNFRVQPTESIVRFPNITNLCPFGEVFNATRFASVYAWNRKRISNCVADYSVLYNSASFSTFKCYGVSPTKLNDLCFTNVYADSFVIRGDEVRQIAPGQTGKIADYNYKLPDDFTGCVIAWNSNNLDSKVGGNYNYLYRLFRKSNLKPFERDISTEIYQAGSTPCNGVEGFNCYFPLQSYGFQPTNGVGYQPYRVVVLSFELLHAPATVCGPKKSTNLVKNKCVNFNFNGLTGTGVLTESNKKFLPFQQFGRDIADTTDAVRDPQTLEILDITPCSFGGVSVITPGTNTSNQVAVLYQDVNCTEVPVAIHADQLTPTWRVYSTGSNVFQTQAFGRRGPEQTQGNFGDQELIRQGTDYKHWPQIAQFAPSASAFFGMSRIGMEVTPSGTWLTYTGAIKLDDKDPNFKDQVILLNKHIDAYKTFPPTEPKKDKKKKADETQALPQRQKKQQTVTLLPAADLDDFSKQLQQSMSSADSTQA\");\n      changeButton();\n      }\n    } else {\n      setProtein(\"\");\n      changeButton();\n    }\n  };\n  \n  // prediction request\n  const post = (seq) => {\n    //Promise로 fetch를 감싼다\n    return new Promise((resolve, reject) => {\n      fetch(\"/konfold/alphafold2\", {\n              method : \"POST\",  //메소드 지정\n              headers : {       //데이터 타입 지정\n                  \"Content-Type\":\"application/json; charset=utf-8\"\n              },\n              body: JSON.stringify({proteinName:seq}) //데이터 JSON문자열화 후 body에 저장\n          })\n          .then(res=>{  //리턴값이 있으면 리턴값에 맞는 req지정\n              console.log(\"fetchtest1:\",res)\n              const blob = res.blob();\n              return blob\n          })\n          .then(blob=> { //리턴값에 대한 처리\n              console.log(\"fetchtest2:\",blob);\n              //res 값에 따른 결과 처리       \n              if(blob == null){\n                console.log(\"데이터 가져오기 실패\");\n              }\n              //let blobURL = URL.createObjectURL(blob)\n              //console.log(\"fetchtest3:\",blob);\n              resolve(blob);\n              //localStorage.setItem('pdb_protein', res);\n          });\n      });\n    };\n\n  // button 클릭\n  const confirm = async (event) => {\n    // 확인 후 다음 페이지\n    event.preventDefault();\n    console.log(\"start_test:\", protein);\n\n    setLoading(true);\n    \n    try {\n      // output blob저장\n      const predictResult = await post(protein);\n      console.log(\"result_blob:\", predictResult);\n      //localStorage.setItem('predictResult', predictResult);\n\n      // url저장\n      let blobURL = URL.createObjectURL(predictResult)\n      console.log(\"result_bloburl:\", blobURL);\n      //localStorage.setItem('predictResultURL', blobURL);\n      //localStorage.setItem('predictResult', predictResult.substring(5));\n\n      //read blob data\n      let reader = new FileReader();\n      reader.onload = function(event) {\n        let pdbdata = event.target.result\n        // save pdb data to local storage\n        localStorage.setItem('pdbData', pdbdata)\n        setPDBPredict(pdbdata)\n      };\n      reader.readAsText(predictResult);\n      setTimeout(() => {\n        setLoading(false);\n        // 시각화 창\n        window.location.href = \"/AlphaOutput\";\n      }, 360000) //필요한 시간 만큼 숫자조정 => 1000 = 1초\n      //while 문으로 작성하려고 해도 뭘 기준으로 해야 하는 지 모르겠음.\n\n    } catch (error) {\n      console.log(\"데이터 가져오기 실패:\", error);\n      setLoading(false);\n    }\n\n  };\n  \n  return (\n    <div className=\"loading_page\">\n\n      {\n        loading?\n        <ClimbingBoxLoader className=\"loading_page\"\n          size = {30}\n          color={\"#123abc\"}\n          loading= {loading}\n          />\n        :\n        <div className=\"inside_page\">\n          <div className=\"titleprotein\">단백질 시퀀스를 입력해 주세요</div>\n          <div className=\"contentWrap\">\n            <div className=\"inputTitle\">단백질 시퀀스</div>\n            <div className=\"inputWrap\">\n              <input\n                className=\"input\"\n                value={protein} //input으로 받은 프로틴 시퀀스\n                onChange={handleInput}\n                onKeyUp={changeButton}\n              />\n            </div> {/* inputWrap 끝 */}\n            <div className=\"errorMessageWrap\">올바른 시퀀스를 입력해 주세요</div>\n          </div>{/* contentWrap 끝 */}\n          <div className=\"inputTitle\">예시 시퀀스</div>\n          <div>\n            <label htmlFor=\"checkbox\">알파-1 글로빈 체인의 일부 서열 </label>\n            <input\n              id=\"checkbox\"\n              type=\"checkbox\"\n              checked={isChecked1}\n              onChange={handleCheckbox1Change}\n            />\n          </div>\n          \n\n          <div>\n            <label htmlFor=\"checkbox\">CRISPR-Cas9</label>\n            <input\n              id=\"checkbox\"\n              type=\"checkbox\"\n              checked={isChecked2}\n              onChange={handleCheckbox2Change}\n            />\n          </div>\n          <div>\n            <label htmlFor=\"checkbox\">SARS-CoV-2 단백질 서열 </label>\n            <input\n              id=\"checkbox\"\n              type=\"checkbox\"\n              checked={isChecked3}\n              onChange={handleCheckbox3Change}\n            />\n          </div>\n          <div>{/* button 시작 */}\n            <button \n            disabled={button} \n            onClick={confirm} \n            className=\"bottomButton\">\n              확인\n            </button>\n          </div>{/* button 끝 */}\n          <div className=\"inputTitle\"> 알파폴드 체험 화면입니다</div>\n        </div> //inside wrap 끝\n\n      }\n\n      \n    </div>//loading page 끝\n    \n  );\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}
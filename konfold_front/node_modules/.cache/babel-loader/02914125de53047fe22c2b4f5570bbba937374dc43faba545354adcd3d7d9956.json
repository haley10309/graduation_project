{"ast":null,"code":"var _jsxFileName = \"P:\\\\konfold\\\\Github\\\\graduation_project\\\\konfold_front\\\\src\\\\pages\\\\AlphaFold.js\",\n  _s = $RefreshSig$();\nimport React from \"react\";\nimport axios from \"axios\";\nimport { useState } from \"react\";\nimport * as $3Dmol from '3dmol/build/3Dmol.js';\nimport $ from 'jquery';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function AlphaFold() {\n  _s();\n  const [protein, setProtein] = useState(\"\"); //입력 값 변수 [입력값, 입력값 변경]\n  const [pdb_predict, setPDBPredict] = useState(null); // response 변수\n\n  const [button, setButton] = useState(true);\n  const isAlpha = str => /^[a-zA-Z]*$/.test(str);\n\n  //로딩 화면  \n  const [loading, setLoading] = useState(false);\n\n  // 알맞은 시퀀스 입력시 Button 켜짐\n  function changeButton() {\n    const UpperProtein = protein.toUpperCase();\n\n    // UpperProtein.includes('G'||'A'||'V'||'L'||'I'||'S'||'T'||'C'||'M'||'D'||'E'||'N'||'Q'||'K'||'R'||'F'||'Y'||'W'||'H'||'P'||'U') ? setButton(false) : setButton(true)\n    // UpperProtein.includes('G'||'A'||'V'||'L'||'I'||'S'||'T'||'C'||'M'||'D'||'E'||'N'||'Q'||'K'||'R'||'F'||'Y'||'W'||'H'||'P'||'U') ? setButton(false) : setButton(true)\n    UpperProtein.includes(\"B\") || UpperProtein.includes(\"J\") || UpperProtein.includes(\"O\") || UpperProtein.includes(\"X\") || UpperProtein.includes(\"Z\") || UpperProtein.includes(\" \") || !isAlpha(UpperProtein) ? setButton(true) : setButton(false);\n  }\n\n  // 입력된 변수 저장\n  const handleInput = event => {\n    event.preventDefault();\n    setProtein(event.target.value); //변수 저장 완료\n    // const UpperProtein = protein.toUpperCase();\n    // UpperProtein.includes('G' ||'A'||'V'||'L'||'I'||'S'||'T'||'C'||'M'||'D'||'E'||'N'||'Q'||'K'||'R'||'F'||'Y'||'W'||'H'||'P'||'U') ? setButton(false) : setButton(true)\n  };\n\n  // prediction request\n  const post = seq => {\n    //Promise로 fetch를 감싼다\n    return new Promise((resolve, reject) => {\n      fetch(\"/konfold/alphafold2\", {\n        method: \"POST\",\n        //메소드 지정\n        headers: {\n          //데이터 타입 지정\n          \"Content-Type\": \"application/json; charset=utf-8\"\n        },\n        body: JSON.stringify({\n          proteinName: seq\n        }) //데이터 JSON문자열화 후 body에 저장\n      }).then(res => {\n        //리턴값이 있으면 리턴값에 맞는 req지정\n        console.log(\"fetchtest1:\", res);\n        const blob = res.blob();\n        return blob;\n      }).then(blob => {\n        //리턴값에 대한 처리\n        console.log(\"fetchtest2:\", blob);\n        //res 값에 따른 결과 처리       \n        if (blob == null) {\n          console.log(\"데이터 가져오기 실패\");\n        }\n        //let blobURL = URL.createObjectURL(blob)\n        console.log(\"fetchtest3:\", blob);\n        resolve(blob);\n        //localStorage.setItem('pdb_protein', res);\n      });\n    });\n  };\n\n  // button 클릭\n  const confirm = async event => {\n    // 확인 후 다음 페이지\n    event.preventDefault();\n    console.log(\"start_test:\", protein);\n    setLoading(true);\n    try {\n      // output저장\n      const predictResult = await post(protein);\n      console.log(\"result_test:\", predictResult);\n      localStorage.setItem('predictResult', predictResult);\n\n      // url저장\n      let blobURL = URL.createObjectURL(predictResult);\n      console.log(\"result_test:\", blobURL);\n      localStorage.setItem('predictResultURL', blobURL);\n      setPDBPredict(blobURL);\n      //localStorage.setItem('predictResult', predictResult.substring(5));\n\n      setLoading(false);\n\n      // 시각화 창\n      //window.location.href = \"/AlphaOutput\";\n      // 시각화\n      $(function () {\n        let element = $('#container-predict');\n        let config = {\n          backgroundColor: 'orange'\n        };\n        let viewer = $3Dmol.createViewer(element, config);\n        //let getId = \"pdb:\" + \"1A00\";\n        viewer.zoomTo();\n        viewer.render();\n        viewer.zoom(0.8, 2000);\n        $jQuery.ajax(blobURL, {\n          sucess: function (data) {\n            viewer.addModel(data, \"pdb\"); /* load data */\n            viewer.setStyle({}, {\n              cartoon: {\n                color: 'spectrum'\n              }\n            }); /* style all atoms */\n            viewer.zoomTo(); /* set camera */\n            viewer.render(); /* render scene */\n            viewer.zoom(0.8, 1000); /* slight zoom */\n          },\n\n          error: function (hdr, status, err) {\n            console.error(\"Failed to load PDB\" + blobURL + \":\" + err);\n          }\n        });\n      });\n    } catch (error) {\n      console.log(\"데이터 가져오기 실패:\", error);\n      setLoading(false);\n    }\n  };\n  const pdbdownload = () => {\n    if (pdb_predict) {\n      window.location.href = pdb_predict;\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"page\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"titleprotein\",\n      children: \"\\uB2E8\\uBC31\\uC9C8 \\uC2DC\\uD000\\uC2A4\\uB97C \\uC785\\uB825\\uD574 \\uC8FC\\uC138\\uC694\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"contentWrap\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"inputTitle\",\n        children: \"\\uB2E8\\uBC31\\uC9C8 \\uC2DC\\uD000\\uC2A4\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"inputWrap\",\n        children: /*#__PURE__*/_jsxDEV(\"input\", {\n          className: \"input\",\n          value: protein //input으로 받은 프로틴 시퀀스\n          ,\n          onChange: handleInput,\n          onKeyUp: changeButton\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 137,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"errorMessageWrap\",\n        children: \"\\uC62C\\uBC14\\uB978 \\uC2DC\\uD000\\uC2A4\\uB97C \\uC785\\uB825\\uD574 \\uC8FC\\uC138\\uC694\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 148,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        disabled: button,\n        onClick: confirm,\n        className: \"bottomButton\",\n        children: \"\\uD655\\uC778\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 151,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 150,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"inputTitle\",\n      children: \"\\uC54C\\uD30C\\uD3F4\\uB4DC \\uCCB4\\uD5D8 \\uD654\\uBA74\\uC785\\uB2C8\\uB2E4\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 158,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 161,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n      className: \"visualization\",\n      children: /*#__PURE__*/_jsxDEV(\"option\", {\n        value: \"3dmolAPI\",\n        selected: true,\n        children: \"\\uD504\\uB85C\\uD2F4 \\uC2DC\\uD000\\uC2A4 \\uD654\\uBA74\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 163,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 162,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"container-predict\",\n      className: \"mol-container\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 165,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: pdbdownload,\n        className: \"download_PDB\",\n        children: \"Download PDB File\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 167,\n        columnNumber: 7\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 166,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 131,\n    columnNumber: 5\n  }, this);\n}\n_s(AlphaFold, \"ceyyOabJNtDaKb361Ror+82ukhM=\");\n_c = AlphaFold;\nvar _c;\n$RefreshReg$(_c, \"AlphaFold\");","map":{"version":3,"names":["React","axios","useState","$3Dmol","$","jsxDEV","_jsxDEV","AlphaFold","_s","protein","setProtein","pdb_predict","setPDBPredict","button","setButton","isAlpha","str","test","loading","setLoading","changeButton","UpperProtein","toUpperCase","includes","handleInput","event","preventDefault","target","value","post","seq","Promise","resolve","reject","fetch","method","headers","body","JSON","stringify","proteinName","then","res","console","log","blob","confirm","predictResult","localStorage","setItem","blobURL","URL","createObjectURL","element","config","backgroundColor","viewer","createViewer","zoomTo","render","zoom","$jQuery","ajax","sucess","data","addModel","setStyle","cartoon","color","error","hdr","status","err","pdbdownload","window","location","href","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onChange","onKeyUp","disabled","onClick","selected","id","_c","$RefreshReg$"],"sources":["P:/konfold/Github/graduation_project/konfold_front/src/pages/AlphaFold.js"],"sourcesContent":["import React from \"react\";\r\nimport axios from \"axios\";\r\nimport { useState } from \"react\";\r\n\r\nimport * as $3Dmol from '3dmol/build/3Dmol.js';\r\nimport $ from 'jquery';\r\n\r\nexport default function AlphaFold(){\r\n  const [protein, setProtein] = useState(\"\"); //입력 값 변수 [입력값, 입력값 변경]\r\n  const [pdb_predict, setPDBPredict] = useState(null) // response 변수\r\n\r\n  const [button, setButton] = useState(true);\r\n  const isAlpha = str => /^[a-zA-Z]*$/.test(str);\r\n  \r\n  //로딩 화면  \r\n  const [loading, setLoading] = useState(false);\r\n\r\n // 알맞은 시퀀스 입력시 Button 켜짐\r\n  function changeButton(){\r\n    const UpperProtein = protein.toUpperCase();\r\n  \r\n  // UpperProtein.includes('G'||'A'||'V'||'L'||'I'||'S'||'T'||'C'||'M'||'D'||'E'||'N'||'Q'||'K'||'R'||'F'||'Y'||'W'||'H'||'P'||'U') ? setButton(false) : setButton(true)\r\n    // UpperProtein.includes('G'||'A'||'V'||'L'||'I'||'S'||'T'||'C'||'M'||'D'||'E'||'N'||'Q'||'K'||'R'||'F'||'Y'||'W'||'H'||'P'||'U') ? setButton(false) : setButton(true)\r\n    (UpperProtein.includes(\"B\") || UpperProtein.includes(\"J\") || UpperProtein.includes(\"O\") || UpperProtein.includes(\"X\") || UpperProtein.includes(\"Z\") || UpperProtein.includes(\" \") || (!isAlpha(UpperProtein))) ? setButton(true) : setButton(false)\r\n\r\n  }\r\n\r\n  // 입력된 변수 저장\r\n  const handleInput = (event) => {\r\n    event.preventDefault();\r\n    setProtein(event.target.value); //변수 저장 완료\r\n    // const UpperProtein = protein.toUpperCase();\r\n    // UpperProtein.includes('G' ||'A'||'V'||'L'||'I'||'S'||'T'||'C'||'M'||'D'||'E'||'N'||'Q'||'K'||'R'||'F'||'Y'||'W'||'H'||'P'||'U') ? setButton(false) : setButton(true)\r\n  };\r\n  \r\n  // prediction request\r\n  const post = (seq) => {\r\n    //Promise로 fetch를 감싼다\r\n    return new Promise((resolve, reject) => {\r\n      fetch(\"/konfold/alphafold2\", {\r\n              method : \"POST\",  //메소드 지정\r\n              headers : {       //데이터 타입 지정\r\n                  \"Content-Type\":\"application/json; charset=utf-8\"\r\n              },\r\n              body: JSON.stringify({proteinName:seq}) //데이터 JSON문자열화 후 body에 저장\r\n          })\r\n          .then(res=>{  //리턴값이 있으면 리턴값에 맞는 req지정\r\n              console.log(\"fetchtest1:\",res)\r\n              const blob = res.blob();\r\n              return blob\r\n          })\r\n          .then(blob=> { //리턴값에 대한 처리\r\n              console.log(\"fetchtest2:\",blob);\r\n              //res 값에 따른 결과 처리       \r\n              if(blob == null){\r\n                console.log(\"데이터 가져오기 실패\");\r\n              }\r\n              //let blobURL = URL.createObjectURL(blob)\r\n              console.log(\"fetchtest3:\",blob);\r\n              resolve(blob);\r\n              //localStorage.setItem('pdb_protein', res);\r\n          });\r\n      });\r\n    };\r\n\r\n  // button 클릭\r\n  const confirm = async (event) => {\r\n    // 확인 후 다음 페이지\r\n    event.preventDefault();\r\n    console.log(\"start_test:\", protein);\r\n\r\n    setLoading(true);\r\n    \r\n    try {\r\n      // output저장\r\n      const predictResult = await post(protein);\r\n      console.log(\"result_test:\", predictResult);\r\n      localStorage.setItem('predictResult', predictResult);\r\n\r\n      // url저장\r\n      let blobURL = URL.createObjectURL(predictResult)\r\n      console.log(\"result_test:\", blobURL);\r\n      localStorage.setItem('predictResultURL', blobURL);\r\n      setPDBPredict(blobURL)\r\n      //localStorage.setItem('predictResult', predictResult.substring(5));\r\n\r\n      setLoading(false);\r\n\r\n      // 시각화 창\r\n      //window.location.href = \"/AlphaOutput\";\r\n      // 시각화\r\n      $(function() {\r\n        let element = $('#container-predict');\r\n        let config = { backgroundColor: 'orange' };\r\n        let viewer = $3Dmol.createViewer( element, config );\r\n        //let getId = \"pdb:\" + \"1A00\";\r\n        viewer.zoomTo();\r\n        viewer.render();\r\n        viewer.zoom(0.8, 2000);\r\n\r\n        $jQuery.ajax(blobURL, {\r\n          sucess: function(data) {\r\n            viewer.addModel( data, \"pdb\" );                       /* load data */\r\n            viewer.setStyle({}, {cartoon: {color: 'spectrum'}});  /* style all atoms */\r\n            viewer.zoomTo();                                      /* set camera */\r\n            viewer.render();                                      /* render scene */\r\n            viewer.zoom(0.8, 1000);                               /* slight zoom */\r\n          },\r\n          error: function(hdr, status, err) {\r\n            console.error(\"Failed to load PDB\" + blobURL + \":\" + err);\r\n          }\r\n        })\r\n      });\r\n\r\n    } catch (error) {\r\n      console.log(\"데이터 가져오기 실패:\", error);\r\n      setLoading(false);\r\n    }\r\n\r\n  };\r\n\r\n  const pdbdownload = () => {\r\n    if (pdb_predict) {\r\n      window.location.href = pdb_predict;\r\n    }\r\n  };\r\n\r\n\r\n  \r\n  return (\r\n    <div className=\"page\">\r\n      <div className=\"titleprotein\">단백질 시퀀스를 입력해 주세요</div>\r\n\r\n      <div className=\"contentWrap\">\r\n        <div className=\"inputTitle\">단백질 시퀀스</div>\r\n        <div className=\"inputWrap\">\r\n          <input\r\n            className=\"input\"\r\n            value={protein} //input으로 받은 프로틴 시퀀스\r\n            onChange={handleInput}\r\n            onKeyUp={changeButton}\r\n            \r\n          />\r\n\r\n          {/* place holder 넣어 보기 */}\r\n        </div>\r\n\r\n        <div className=\"errorMessageWrap\">올바른 시퀀스를 입력해 주세요</div>\r\n      </div>\r\n      <div>\r\n        <button \r\n        disabled={button} \r\n        onClick={confirm} \r\n        className=\"bottomButton\">\r\n          확인\r\n        </button>\r\n      </div>\r\n      <div className=\"inputTitle\"> \r\n        알파폴드 체험 화면입니다\r\n      </div>\r\n      <br></br>\r\n      <select className=\"visualization\">\r\n        <option value=\"3dmolAPI\" selected>프로틴 시퀀스 화면</option>\r\n      </select>\r\n      <div id=\"container-predict\" className=\"mol-container\"></div>\r\n      <div>\r\n      <button \r\n        onClick={pdbdownload}\r\n        className = \"download_PDB\">\r\n          Download PDB File\r\n      </button>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}
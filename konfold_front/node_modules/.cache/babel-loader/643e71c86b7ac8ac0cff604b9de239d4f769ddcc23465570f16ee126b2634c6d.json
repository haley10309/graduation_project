{"ast":null,"code":"var _jsxFileName = \"P:\\\\konfold\\\\Github\\\\graduation_project\\\\konfold_front\\\\src\\\\pages\\\\AlphaFold.js\",\n  _s = $RefreshSig$();\nimport React from \"react\";\nimport axios from \"axios\";\nimport { useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function AlphaFold() {\n  _s();\n  const [protein, setProtein] = useState(\"\"); //입력 값 변수 [입력값, 입력값 변경]\n  const [proteinName, setProteinName] = useState(\"\"); // 저장 후 변수\n  const [pdb_predict, setPDBPredict] = useState(null); // response 변수\n\n  const [button, setButton] = useState(true);\n  const isAlpha = str => /^[a-zA-Z]*$/.test(str);\n\n  // 알맞은 시퀀스 입력시 Button 켜짐\n  function changeButton() {\n    const UpperProtein = protein.toUpperCase();\n\n    // UpperProtein.includes('G'||'A'||'V'||'L'||'I'||'S'||'T'||'C'||'M'||'D'||'E'||'N'||'Q'||'K'||'R'||'F'||'Y'||'W'||'H'||'P'||'U') ? setButton(false) : setButton(true)\n    // UpperProtein.includes('G'||'A'||'V'||'L'||'I'||'S'||'T'||'C'||'M'||'D'||'E'||'N'||'Q'||'K'||'R'||'F'||'Y'||'W'||'H'||'P'||'U') ? setButton(false) : setButton(true)\n    UpperProtein.includes(\"B\") || UpperProtein.includes(\"J\") || UpperProtein.includes(\"O\") || UpperProtein.includes(\"X\") || UpperProtein.includes(\"Z\") || UpperProtein.includes(\" \") || !isAlpha(UpperProtein) ? setButton(true) : setButton(false);\n  }\n\n  // 입력된 변수 저장\n  const handleInput = event => {\n    event.preventDefault();\n    setProtein(event.target.value); //변수 저장 완료\n    // const UpperProtein = protein.toUpperCase();\n    // UpperProtein.includes('G' ||'A'||'V'||'L'||'I'||'S'||'T'||'C'||'M'||'D'||'E'||'N'||'Q'||'K'||'R'||'F'||'Y'||'W'||'H'||'P'||'U') ? setButton(false) : setButton(true)\n  };\n\n  // prediction request\n  const post = seq => {\n    //Promise로 fetch를 감싼다\n    return new Promise((resolve, reject) => {\n      fetch(\"/konfold/alphafold2\", {\n        method: \"POST\",\n        //메소드 지정\n        headers: {\n          //데이터 타입 지정\n          \"Content-Type\": \"application/json; charset=utf-8\"\n        },\n        body: JSON.stringify({\n          proteinName: seq\n        }) //데이터 JSON문자열화 후 body에 저장\n      }).then(res => {\n        //리턴값이 있으면 리턴값에 맞는 req지정\n        console.log(\"fetchtest1:\", res);\n        const blob = res.blob();\n        return blob;\n      }).then(blob => {\n        //리턴값에 대한 처리\n        console.log(\"fetchtest2:\", blob);\n        //res 값에 따른 결과 처리       \n        if (blob == null) {\n          console.log(\"데이터 가져오기 실패\");\n        }\n        resolve(URL.createObjectURL(blob));\n        //localStorage.setItem('pdb_protein', res);\n        //console.log(pdb_predict);\n      });\n    });\n  };\n\n  // button 클릭\n  const confirm = async event => {\n    // 확인 후 다음 페이지\n    event.preventDefault();\n    // 확인 된 input저장\n    setProteinName(protein);\n    console.log(\"start_test:\", pdb_predict);\n\n    // output저장\n    setPDBPredict(await post(proteinName));\n    console.log(\"result_test:\", pdb_predict);\n    console.log(\"result_test:\", pdb_predict);\n\n    // 시각화 창\n    //window.location.href = \"/AlphaOutput\";\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"page\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"titleprotein\",\n      children: \"\\uB2E8\\uBC31\\uC9C8 \\uC2DC\\uD000\\uC2A4\\uB97C \\uC785\\uB825\\uD574 \\uC8FC\\uC138\\uC694\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"contentWrap\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"inputTitle\",\n        children: \"\\uB2E8\\uBC31\\uC9C8 \\uC2DC\\uD000\\uC2A4\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"inputWrap\",\n        children: /*#__PURE__*/_jsxDEV(\"input\", {\n          className: \"input\",\n          value: protein //input으로 받은 프로틴 시퀀스\n          ,\n          onChange: handleInput,\n          onKeyUp: changeButton\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"errorMessageWrap\",\n        children: \"\\uC62C\\uBC14\\uB978 \\uC2DC\\uD000\\uC2A4\\uB97C \\uC785\\uB825\\uD574 \\uC8FC\\uC138\\uC694\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        disabled: button,\n        onClick: confirm,\n        className: \"bottomButton\",\n        children: \"\\uD655\\uC778\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"inputTitle\",\n      children: \"\\uC54C\\uD30C\\uD3F4\\uB4DC \\uCCB4\\uD5D8 \\uD654\\uBA74\\uC785\\uB2C8\\uB2E4\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 81,\n    columnNumber: 5\n  }, this);\n}\n_s(AlphaFold, \"MERWCPQRNfclrREG0xLsGQwvahQ=\");\n_c = AlphaFold;\nvar _c;\n$RefreshReg$(_c, \"AlphaFold\");","map":{"version":3,"names":["React","axios","useState","jsxDEV","_jsxDEV","AlphaFold","_s","protein","setProtein","proteinName","setProteinName","pdb_predict","setPDBPredict","button","setButton","isAlpha","str","test","changeButton","UpperProtein","toUpperCase","includes","handleInput","event","preventDefault","target","value","post","seq","Promise","resolve","reject","fetch","method","headers","body","JSON","stringify","then","res","console","log","blob","URL","createObjectURL","confirm","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onChange","onKeyUp","disabled","onClick","_c","$RefreshReg$"],"sources":["P:/konfold/Github/graduation_project/konfold_front/src/pages/AlphaFold.js"],"sourcesContent":["import React from \"react\";\r\nimport axios from \"axios\";\r\nimport { useState } from \"react\";\r\n\r\nexport default function AlphaFold(){\r\n  const [protein, setProtein] = useState(\"\"); //입력 값 변수 [입력값, 입력값 변경]\r\n  const [proteinName, setProteinName] = useState(\"\") // 저장 후 변수\r\n  const [pdb_predict, setPDBPredict] = useState(null) // response 변수\r\n\r\n  const [button, setButton] = useState(true);\r\n  const isAlpha = str => /^[a-zA-Z]*$/.test(str);\r\n    \r\n    \r\n\r\n // 알맞은 시퀀스 입력시 Button 켜짐\r\n function changeButton(){\r\n  const UpperProtein = protein.toUpperCase();\r\n \r\n // UpperProtein.includes('G'||'A'||'V'||'L'||'I'||'S'||'T'||'C'||'M'||'D'||'E'||'N'||'Q'||'K'||'R'||'F'||'Y'||'W'||'H'||'P'||'U') ? setButton(false) : setButton(true)\r\n  // UpperProtein.includes('G'||'A'||'V'||'L'||'I'||'S'||'T'||'C'||'M'||'D'||'E'||'N'||'Q'||'K'||'R'||'F'||'Y'||'W'||'H'||'P'||'U') ? setButton(false) : setButton(true)\r\n  (UpperProtein.includes(\"B\") || UpperProtein.includes(\"J\") || UpperProtein.includes(\"O\") || UpperProtein.includes(\"X\") || UpperProtein.includes(\"Z\") || UpperProtein.includes(\" \") || (!isAlpha(UpperProtein))) ? setButton(true) : setButton(false)\r\n\r\n}\r\n\r\n// 입력된 변수 저장\r\nconst handleInput = (event) => {\r\n  event.preventDefault();\r\n  setProtein(event.target.value); //변수 저장 완료\r\n  // const UpperProtein = protein.toUpperCase();\r\n  // UpperProtein.includes('G' ||'A'||'V'||'L'||'I'||'S'||'T'||'C'||'M'||'D'||'E'||'N'||'Q'||'K'||'R'||'F'||'Y'||'W'||'H'||'P'||'U') ? setButton(false) : setButton(true)\r\n};\r\n  \r\n  \r\n// prediction request\r\nconst post = (seq) => {\r\n  //Promise로 fetch를 감싼다\r\n  return new Promise((resolve, reject) => {\r\n    fetch(\"/konfold/alphafold2\", {\r\n            method : \"POST\",  //메소드 지정\r\n            headers : {       //데이터 타입 지정\r\n                \"Content-Type\":\"application/json; charset=utf-8\"\r\n            },\r\n            body: JSON.stringify({proteinName:seq}) //데이터 JSON문자열화 후 body에 저장\r\n        })\r\n        .then(res=>{  //리턴값이 있으면 리턴값에 맞는 req지정\r\n            console.log(\"fetchtest1:\",res)\r\n            const blob = res.blob();\r\n            return blob\r\n        })\r\n        .then(blob=> { //리턴값에 대한 처리\r\n            console.log(\"fetchtest2:\",blob);\r\n            //res 값에 따른 결과 처리       \r\n            if(blob == null){\r\n              console.log(\"데이터 가져오기 실패\");\r\n            }\r\n            resolve(URL.createObjectURL(blob));\r\n            //localStorage.setItem('pdb_protein', res);\r\n            //console.log(pdb_predict);\r\n        });\r\n    });\r\n  };\r\n\r\n  // button 클릭\r\n  const confirm = async (event) => {\r\n    // 확인 후 다음 페이지\r\n    event.preventDefault();\r\n    // 확인 된 input저장\r\n    setProteinName(protein);\r\n    console.log(\"start_test:\", pdb_predict);\r\n\r\n    // output저장\r\n    setPDBPredict(await post(proteinName));\r\n    console.log(\"result_test:\", pdb_predict);\r\n    console.log(\"result_test:\", pdb_predict);\r\n\r\n    // 시각화 창\r\n    //window.location.href = \"/AlphaOutput\";\r\n  };\r\n\r\n  return (\r\n    <div className=\"page\">\r\n      <div className=\"titleprotein\">단백질 시퀀스를 입력해 주세요</div>\r\n\r\n      <div className=\"contentWrap\">\r\n        <div className=\"inputTitle\">단백질 시퀀스</div>\r\n        <div className=\"inputWrap\">\r\n          <input\r\n            className=\"input\"\r\n            value={protein} //input으로 받은 프로틴 시퀀스\r\n            onChange={handleInput}\r\n            onKeyUp={changeButton}\r\n            \r\n          />\r\n\r\n          {/* place holder 넣어 보기 */}\r\n        </div>\r\n\r\n        <div className=\"errorMessageWrap\">올바른 시퀀스를 입력해 주세요</div>\r\n      </div>\r\n      <div>\r\n        <button \r\n        disabled={button} \r\n        onClick={confirm} \r\n        className=\"bottomButton\">\r\n          확인\r\n        </button>\r\n      </div>\r\n      <div className=\"inputTitle\"> \r\n        알파폴드 체험 화면입니다\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}